#!/usr/bin/env node

/*
 * # Virtual Lambda Invoke Script
 * This script allows you to imitate the lambda execution of your plugin
 * without actually having to deploy it to lambda.
 */
var path = require('path');
var fs = require('fs');

var options = {};

var cwd;
var response = {
    function_error: null,
    payload: null,
    status_code: 200
}

function log(val) {
    process.stdout.write(val)
}

function returnValue() {
    process.stdout.write("------%%------\n")
    var out = JSON.stringify(response);
    process.stdout.write(out);
}

var context = {
    done: function (error, result) {
        if (error === null || typeof(error) === 'undefined') {
            context.succeed(result);
        } else {
            context.fail(error);
        }
    },
    succeed: function (result) {
        response.payload = result;
        returnValue();
    },
    fail: function (error) {
        response.function_error = 'Handled';
        response.status_code = 500;
        response.payload = {errorMessage: error};
        returnValue();
    },
    awsRequestId: 'LAMBDA_INVOKE',
    logStreamName: 'LAMBDA_INVOKE',
};


try {
  if(process.argv[2] == 'local') {
    if(process.argv[3]) {
      var event = JSON.parse(process.argv[3]);
    } else {
      throw new Error("No event payload.")
    }
  }
  if(process.argv[2] == 'fake') {
    var ename = process.argv[3] || 'generic';
    if(process.argv[3]) {
      var contents = fs.readFileSync(__dirname+'/../events/' + ename + '.json')
      var event = JSON.parse(contents);
    } else {
      throw new Error("No event payload.")
    }

  }
  var lambda = require((process.env['APP_ROOT_PATH'] || process.cwd())+'/index.js');
  lambda[options.handler || 'handler'](event, context);
} catch(e) {
    response.function_error = 'Unhandled'
    response.status_code = 500;
    response.payload = e.stack;
    returnValue()
}
